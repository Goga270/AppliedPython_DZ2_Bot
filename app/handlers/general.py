from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram import types, Router, F
from aiogram.filters import Command, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils import helpers
import logging

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ProfileInfoState(StatesGroup):
    user_id = State()
    user_gender = State()
    user_weight = State()
    user_height = State()
    user_age = State()
    user_activity_level = State()
    user_city = State()
    user_calories_goal = State()


def get_activity_level_keyboard():
    rows = [[InlineKeyboardButton(text="Low (–ú–µ–Ω–µ–µ 2000 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å)", callback_data="activity_low")],
            [InlineKeyboardButton(text="Medium (2001 - 2500 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å)", callback_data="activity_medium")],
            [InlineKeyboardButton(text="High (2501 - 3000 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å)", callback_data="activity_high")],
            [InlineKeyboardButton(text="Very High (–±–æ–ª–µ–µ 3001 –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å)", callback_data="activity_very_high")]]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    return keyboard

def get_gender_keyboard():
    rows = [[InlineKeyboardButton(text="–ú—É–∂—á–∏–Ω–∞", callback_data="gender_male")],
            [InlineKeyboardButton(text="–ñ–µ–Ω—â–∏–Ω–∞", callback_data="gender_female")]]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    return keyboard

def get_activity_goal_keyboard():
    rows = [[InlineKeyboardButton(text="–ü–æ—Ö—É–¥–µ–Ω–∏–µ", callback_data="weight_loss")],
     [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="weight_maintenance")],
     [InlineKeyboardButton(text="–ù–∞–±–æ—Ä –º–∞—Å—Å—ã", callback_data="weight_gain")]]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    return keyboard

def get_location_keyboard():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–æ–ª–µ–º keyboard (—Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫)
    location_button = KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é", request_location=True)
    no_location_button = KeyboardButton(text="–Ø –Ω–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π")

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å –∫–ª–∞–≤–∏—à–∞–º–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    markup = ReplyKeyboardMarkup(
        keyboard=[[location_button, no_location_button]],  # —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫
        resize_keyboard=True,
        one_time_keyboard=True
    )
    return markup

@router.message(Command('start'))
async def start(message: types.Message):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–ª –ê–ª–∞–¥–∏–Ω—Å–∫–∏–π.–ì.–ê, —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º!")

@router.message(Command('set_profile'))
async def set_profile_handler(message: types.Message, state: FSMContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /set_profile")
    users = helpers.read_users()
    if str(message.from_user.id) in users:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id = {message.from_user.id} —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
        await state.clear()
    else:
        await state.update_data(user_id= str(message.from_user.id))
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –ø–æ–ª!", reply_markup=get_gender_keyboard())
        await state.set_state(ProfileInfoState.user_gender)

@router.callback_query(StateFilter(ProfileInfoState.user_gender), lambda c: c.data.startswith("gender_"))
async def set_profile_gender(callback: types.CallbackQuery, state: FSMContext):
    logger.info("–ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–µ")
    gender = callback.data.split("_")[1]
    await state.update_data(user_gender=gender)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–µ—Å!")
    await state.set_state(ProfileInfoState.user_weight)

@router.message(ProfileInfoState.user_weight)
async def set_profile_weight(message: types.Message, state: FSMContext):
    logger.info("–ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –≤–µ—Å–µ")
    weight = message.text
    await state.update_data(user_weight=weight)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º)")
    await state.set_state(ProfileInfoState.user_height)

@router.message(ProfileInfoState.user_height)
async def set_profile_height(message: types.Message, state: FSMContext):
    logger.info("–ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ—Å—Ç–µ")
    height = message.text
    await state.update_data(user_height=height)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç!")
    await state.set_state(ProfileInfoState.user_age)

@router.message(ProfileInfoState.user_age)
async def set_profile_age(message: types.Message, state: FSMContext):
    logger.info("–ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ")
    height = message.text
    await state.update_data(user_age=height)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–∞—à—É –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", reply_markup=get_activity_level_keyboard())
    await state.set_state(ProfileInfoState.user_activity_level)

@router.callback_query(StateFilter(ProfileInfoState.user_activity_level), lambda c: c.data.startswith("activity_"))
async def set_profile_activity_level(callback: types.CallbackQuery, state: FSMContext):
    logger.info("–ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ–∫–∞")
    activity_level = callback.data.split("_")[1]
    await state.update_data(user_activity_level=activity_level)
    await callback.message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üåç –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–±–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è. üèôÔ∏è\n–ò–ª–∏ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π. –ï—Å–ª–∏ —É –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.",
        reply_markup=get_location_keyboard())
    await state.set_state(ProfileInfoState.user_city)

@router.message(StateFilter(ProfileInfoState.user_city), F.location)
async def handle_location_test1(message: types.Message, state: FSMContext):
    if message.location:
        latitude = message.location.latitude
        longitude = message.location.longitude

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é API
        city = helpers.get_city_from_coords(latitude, longitude)

        if city:
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥
            await message.answer(
                f"–Ø –¥—É–º–∞—é, —Ç—ã —Å–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ: {city}.")
            await state.update_data(user_city=city)
            await message.answer("–û–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å —Ç–µ–º —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å?", reply_markup=get_activity_goal_keyboard())
            await state.set_state(ProfileInfoState.user_calories_goal)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥. –í–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")

@router.message(StateFilter(ProfileInfoState.user_city), F.text)
async def handle_location_test2(message: types.Message, state: FSMContext):
    if message.text != "–Ø –Ω–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π":
        user_city = message.text
        await state.update_data(user_city=user_city)
        await message.answer(f"–¢—ã –∂–∏–≤–µ—à—å –≤ –≥–æ—Ä–æ–¥–µ {user_city}? –û—Ç–ª–∏—á–Ω–æ! üèôÔ∏è –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. üòä")
        await message.answer("–û–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å —Ç–µ–º —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å?", reply_markup=get_activity_goal_keyboard())
        await state.set_state(ProfileInfoState.user_calories_goal)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@router.callback_query(StateFilter(ProfileInfoState.user_city))
async def handle_location(callback: types.CallbackQuery, state: FSMContext):
    if callback.message.location:
        latitude = callback.message.location.latitude
        longitude = callback.message.location.longitude

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é API
        city = helpers.get_city_from_coords(latitude, longitude)

        if city:
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥
            await callback.message.answer(
                f"–Ø –¥—É–º–∞—é, —Ç—ã —Å–µ–π—á–∞—Å –≤ –≥–æ—Ä–æ–¥–µ: {city}.")
            await state.update_data(user_city=city)
            await callback.message.answer("–û–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å —Ç–µ–º —á–µ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å?", reply_markup=get_activity_goal_keyboard())
            await state.set_state(ProfileInfoState.user_calories_goal)
        else:
            await callback.message.answer(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é.")
    elif callback.message.text == "–Ø –Ω–µ —Ö–æ—á—É –¥–µ–ª–∏—Ç—å—Å—è –ª–æ–∫–∞—Ü–∏–µ–π":
        await callback.message.answer("–û–∫–µ–π! üòä –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–º.")

@router.callback_query(StateFilter(ProfileInfoState.user_calories_goal), lambda c: c.data.startswith("weight_"))
async def set_profile_activity_level(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    callback_data = callback.data.split("_")[1]
    bmr = helpers.calculate_bmr(data['user_weight'], data['user_height'], data['user_age'], data['user_gender'])
    tdee = helpers.calculate_tdee(bmr, data['user_activity_level'])
    activity_goal = helpers.calculate_goal_calories(tdee, callback_data)
    await state.update_data(user_calories_goal = int(activity_goal))
    users = helpers.read_users()
    if data['user_id'] not in users:
        users[data['user_id']] = {
            "user_gender": data['user_gender'],
            "user_weight": data['user_weight'],
            "user_height": data['user_height'],
            "user_age": data['user_age'],
            "user_activity_level": data['user_activity_level'],
            "user_city": data['user_city'],
            "user_calories_goal": activity_goal
        }
        helpers.write_users(users)
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
    else:
        await callback.message.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


def register_handlers(dp):
    dp.include_router(router)