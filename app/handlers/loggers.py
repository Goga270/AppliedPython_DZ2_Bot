from aiogram import types, Router
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from utils import helpers
import re
import logging

router = Router()
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class WaterState(StatesGroup):
    water_ml = State()

class CaloriesState(StatesGroup):
    product = State()
    weight_grams = State()

class WorkoutState(StatesGroup):
    activity = State()
    duration = State()


@router.message(Command('log_water'))
async def log_water_command(message: types.Message,  state: FSMContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /log_water")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤—ã–ø–∏–ª–∏ –≤–æ–¥—ã –≤ –ú–õ(–º–∏–ª–∏–ª–∏—Ç—Ä–∞—Ö)")
    await state.set_state(WaterState.water_ml)

@router.message(WaterState.water_ml)
async def log_water_handler(message: types.Message, state: FSMContext):
    water_count_string = message.text
    match = re.match(r'^\d+', water_count_string.strip())
    water_count_int = 0
    if match:
        water_count_int = int(match.group(0))
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞–µ—Ç–ª—å –≤—ã–ø–∏–ª –≤–æ–¥—ã = {water_count_int}")
    else:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —á–∏—Å–ª–æ")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤—ã–ø–∏–ª–∏ –≤–æ–¥—ã –≤ –ú–õ(–º–∏–ª–∏–ª–∏—Ç—Ä–∞—Ö), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞!")

    helpers.log_user_data(str(message.from_user.id), 0, water_count_int)
    current_data = helpers.load_data()
    await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
    logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É: water_ml = {water_count_int}")
    if str(message.from_user.id) in current_data:
        water_goal = int(helpers.calculate_water_goal(str(message.from_user.id)))
        current_water_progress = int(current_data[str(message.from_user.id)]["water_ml"])
        if current_water_progress >= water_goal:
            await message.answer(
                f"üéâ –£—Ä–∞! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É –ø–æ –≤–æ–¥–µ!\n"
                f"üíß –í—ã–ø–∏—Ç–æ: {current_water_progress} –º–ª –∏–∑ {water_goal} –º–ª.\n"
                f"–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™"
            )
        else:
            remaining_water = water_goal - current_water_progress
            await message.answer(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f"üíß –í–æ–¥–∞:\n"
                f"- –í—ã–ø–∏—Ç–æ: {current_water_progress} –º–ª –∏–∑ {water_goal} –º–ª.\n"
                f"‚ùó –û—Å—Ç–∞–ª–æ—Å—å: {remaining_water} –º–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.\n"
                f"–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –≥–ª–æ—Ç–æ–∫ –≤–æ–¥—ã. üö∞"
            )
        await state.clear()
    else:
        logger.error("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        await state.clear()

@router.message(Command('log_calories'))
async def log_calories_command(message: types.Message,  state: FSMContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /log_calories")
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã —É–ø–æ—Ç—Ä–µ–±–∏–ª–∏')
    await state.set_state(CaloriesState.product)

@router.message(CaloriesState.product)
async def log_calories_product(message: types.Message,  state: FSMContext):
    product = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—ä–µ–ª - {product}")
    product_en = await helpers.translate_to_english(product)
    await state.update_data(product=product_en)
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º–æ–≤ {product} –≤—ã —Å—ä–µ–ª–∏')
    await state.set_state(CaloriesState.weight_grams)

@router.message(CaloriesState.weight_grams)
async def log_calories_weight(message: types.Message,  state: FSMContext):
    data = await state.get_data()
    weight_string = message.text
    match = re.match(r'^\d+', weight_string.strip())
    weight_int = 0
    if match:
        weight_int = int(match.group(0))
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥—Ä–∞–º–º–æ–≤–∫–∞ —Å—ä–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ {weight_int}")
    else:
        logger.warning("–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Å—ä–µ–ª–∏ –≤ –≥—Ä–∞–º–º–∞—Ö, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞!")

    if weight_int != 0:
        try:
            calories = helpers.get_calories(data['product'], weight_int)
            helpers.log_user_data(str(message.from_user.id), int(calories), 0, 0)
            current_data = helpers.load_data()
            await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
            logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É: calories = {calories}")
            if str(message.from_user.id) in current_data:
                calories_goal = helpers.get_calories_goal(str(message.from_user.id))
                curr_calories_progress = int(current_data[str(message.from_user.id)]["calories"])

                if curr_calories_progress >= calories_goal:
                    await message.answer(
                        f"üéâ –£—Ä–∞! –í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É –ø–æ –∫–∞–ª–æ—Ä–∏—è–º!\n"
                        f"üçî –ö–∞–ª–æ—Ä–∏–π —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {curr_calories_progress} –ö–∫–∞–ª–ª –∏–∑ {calories_goal} –ö–∫–∞–ª–ª.\n"
                        f"–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±–æ–ª—å—à–µ –Ω–µ –∫—É—à–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –∏–Ω–∞—á–µ –ø–æ–ø—Ä–∞–≤–∏—Ç–µ—Å—å!!"
                    )
                else:
                    remaining_calories = calories_goal - curr_calories_progress
                    await message.answer(
                        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                        f"üçî –ö–ª–æ—Ä–∏–∏:\n"
                        f"- –£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {curr_calories_progress} –ö–∫–∞–ª–ª –∏–∑ {calories_goal} –ö–∫–∞–ª–ª.\n"
                        f"‚ùó –û—Å—Ç–∞–ª–æ—Å—å: {remaining_calories} –ö–∫–∞–ª–ª –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–æ—Ä–º—ã.\n"
                        f"–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å!"
                    )
                await state.clear()
            else:
                logger.error("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                await state.clear()
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")
            await state.clear()

@router.message(Command('log_workout'))
async def log_workout_command(message: types.Message,  state: FSMContext):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /log_workout")
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —á–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å')
    await state.set_state(WorkoutState.activity)
@router.message(WorkoutState.activity)
async def log_workout_activity(message: types.Message,  state: FSMContext):
    activity = message.text
    activity_en = await helpers.translate_to_english(activity)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {activity}")
    await state.update_data(activity=activity_en)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –≤ –º–∏–Ω—É—Ç–∞—Ö")
    await state.set_state(WorkoutState.duration)

@router.message(WorkoutState.duration)
async def log_workout_duration(message: types.Message,  state: FSMContext):
    data = await state.get_data()
    dur_string = message.text
    match = re.match(r'^\d+', dur_string.strip())
    dur_int = 0
    if match:
        dur_int = int(match.group(0))
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - {dur_int}")
    else:
        logger.warning("–í–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ")
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –º–∏–Ω—É—Ç–∞—Ö, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞!")


    if dur_int != 0:
        try:
            burned_cal = helpers.get_burned_calories(str(message.from_user.id), data['activity'], dur_int)
            helpers.log_user_data(str(message.from_user.id), 0, 0, burned_cal)
            current_data = helpers.load_data()
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É: burned_calories = {burned_cal}")
            await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—Å–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
            if str(message.from_user.id) in current_data:
                await message.answer(
                    f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                    f"üèÉ‚Äç‚ôÇÔ∏èüî• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['activity']} –≤ —Ç–µ—á–µ–Ω–∏–∏ {dur_int} –º–∏–Ω—É—Ç\n"
                    f"üî•üçΩÔ∏è –°–æ–∂–∂–µ–Ω–æ: {burned_cal} –∫–∫–∞–ª.\n"
                    f"üî• –í—Å–µ–≥–æ —Å–æ–∂–∂–µ–Ω–æ: {current_data[str(message.from_user.id)]['burned_calories']} –∫–∫–∞–ª.\n"
                    f"–í—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏!"
                )
                await state.clear()
            else:
                logger.error("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                await message.answer("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                await state.clear()
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")


def register_handlers(dp):
    dp.include_router(router)